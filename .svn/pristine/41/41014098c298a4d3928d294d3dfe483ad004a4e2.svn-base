# -*- coding: utf-8 -*-
import sys
import os
import random
import time
import json
import copy
from pprint import pprint
from errors import err
from  BaseService import BaseService
from  CardModel import CardModel
from  HeroModel import HeroModel
from  RoomModel import RoomModel
from  SkillModel import SkillModel
from data import data


class FightService(BaseService): 
    def __init__(self): 
        super(FightService, self).__init__()
        self.data= copy.deepcopy(data)  
        
    
    def testMethod(self, params):
        self.result["data"]= {"data1":11212, "data2": {"room_id":451377, "score":[3,5,6,8]}}
        return self.result, None
    
    def searchRoom(self, params): 
        if(isinstance(params, dict)== False or params.get('uuid')== None or params.get('heroId')== None): 
                self.result["error"]= {"code":1, "msg": err[1]}           
                return self.result, None
        uuid= params.get('uuid')
        heroId= params.get('heroId')     
        self.redis.zadd('hs:user:search'+ ":"+ self.server_id, uuid, int(heroId))      

        return self.createRoom(params)
        
    def createRoom(self, params): 
        if(isinstance(params, dict)== False or params.get('uuid')== None): 
                self.result["error"]= {"code":1, "msg": err[1]}           
                return self.result, None
        uuid= params.get('uuid')    
        total= self.redis.zcard('hs:user:search'+ ":"+ self.server_id)
        print "total", total
        retry_count= 5
        uuid2= None
        #only my self
        if total== 1:
            #self.result['error']= {'code':5, 'msg':err[5]}
            self.result['method']= 'matcheding'
            self.result['data']['status']= 'only one'
            return self.result, None
        elif total== 2:
            uuid_r= self.redis.zrange('hs:user:search'+ ":"+ self.server_id, 0, 0)
            uuid_r2= self.redis.zrange('hs:user:search'+ ":"+ self.server_id, 1, 1)
            if self.redis.zscore('hs:room:user'+ ":"+ self.server_id, uuid_r)== None and len(uuid_r)>0 and uuid_r[0]!= uuid:
                uuid2= uuid_r[0]
            elif self.redis.zscore('hs:room:user'+ ":"+ self.server_id, uuid_r2)== None and len(uuid_r2)>0 and uuid_r2[0]!= uuid:
                uuid2= uuid_r2[0]
        else:
            while retry_count>0:
                  r= random.randint(0, total-1)
                  print "r", r
                  uuid_r= self.redis.zrange('hs:user:search'+ ":"+ self.server_id, r, r)
                  #print "uuid_r", type(uuid_r), uuid_r
                  #if len(uuid_r)>0:
                        #print 'zscore', self.redis.zscore('hs:room:user', uuid_r[0])
                  if self.redis.zscore('hs:room:user'+ ":"+ self.server_id, uuid_r)== None and len(uuid_r)>0 and uuid_r[0]!= uuid:
                        uuid2= uuid_r[0]
                        break
                  else:
                        pass  #todo
                  retry_count= retry_count -1
        if uuid2== None:
            self.result['method']= 'matcheding'
            self.result['data']['status']= 'uuid2 empty'
            return self.result, None
    
        retry_count= 3
        room_id= None
        while retry_count>0:
            r= str(random.randint(100000000, 900000000))
            if self.redis.exists('hs:room:info:'+ r)== False:
                    room_id= r
                    break
            retry_count= retry_count -1
        if room_id== None:
            self.result['method']= 'matcheding'
            self.result['data']['status']= 'room_id empty'
            return self.result, None
        
        heroId1= int(self.redis.zscore('hs:user:search'+ ":"+ self.server_id, uuid))
        heroId2= int(self.redis.zscore('hs:user:search'+ ":"+ self.server_id, uuid2))
        hero1= HeroModel.getSystemOrUserHerosById(uuid, heroId1)
        hero2= HeroModel.getSystemOrUserHerosById(uuid2, heroId2)

        if hero1== None or hero2== None:
            self.result["error"]= {"code":21, "msg": err[21]}           
            return self.result, None       
        
        self.data['room_info']['pos1']= uuid
        self.data['room_info']['pos2']= uuid2
        self.data['room_info']['roomId']= room_id
        self.data['room_info']['heros']= [hero1, hero2]
        
        self.data['room_info']['hp1']= hero1['hp']
        self.data['room_info']['atk1']= hero1['atk']
        self.data['room_info']['hp2']= hero2['hp']
        self.data['room_info']['atk2']= hero2['atk']
        
        #todo 英雄护甲
        
        RoomModel.setRoom(room_id, self.data['room_info'])      
        #self.redis.zadd('hs:room:user'+ ":"+ self.server_id, uuid, room_id, uuid2, room_id)  
        
        del hero1['creatTime']
        del hero1['jobCards']
        del hero1['type']
        del hero1['aliasName']
        del hero1['level']
        del hero1['xp']
        
        del hero2['creatTime']
        del hero2['jobCards']
        del hero2['type']
        del hero2['aliasName']
        del hero2['level']
        del hero2['xp']    
      
        '''
        del self.data['room_info']['heros']
        del self.data['room_info']['hp1']
        del self.data['room_info']['hp2']
        del self.data['room_info']['atk1']
        del self.data['room_info']['atk2']
        del self.data['room_info']['status1']
        del self.data['room_info']['status2']
        
        del self.data['room_info']['pos1']
        del self.data['room_info']['pos2']
        '''
        #for security 
        room_info= {}
        room_info['roomId']= self.data['room_info']['roomId']
        
        self.push_result['uuid']= uuid2
        self.push_result['service']= "main"
        self.push_result['method']= "matchedSucceeded"      

        self.push_result['params']= {"heros":[hero1, hero2], "roomInfo": room_info, "first": 0}
        
        data= {"heros":[hero1, hero2], "roomInfo": room_info, "first": 1}
        self.result['data']= data
            
        self.redis.zrem('hs:user:search'+ ":"+ self.server_id, uuid, uuid2)
        #self.redis.zadd('hs:room:user'+ ":"+ self.server_id, uuid, room_id)        
        
        self.result['method']= "matchedSucceeded"
        return self.result, self.push_result
    
    '''
    def changeFirstHC(self, params):
        return None, None   
    '''
    def matchedSucceededComplete(self, params):
        if(isinstance(params, dict)== False or params.get('uuid')== None or params.get('roomId')== None): 
            self.result["error"]= {"code":1, "msg": err[1]}           
            return self.result, None
        uuid= params.get('uuid')
        room_id= params.get('roomId')
        room= RoomModel.getRoom(room_id)
        pos1= room.get('pos1')
        pos2= room.get('pos2')
        
        round= room.get('round')            
        firstGetCardTime1= room.get('firstGetCardTime1')
        firstGetCardTime2= room.get('firstGetCardTime2')
        cardHand1=  room.get('cardHand1')
        cardHand2=  room.get('cardHand2')
        firstGetCardEndTime= room.get('firstGetCardEndTime')
        
        
        #reids have changed the type of the value 
        if round!= 0:
                self.result["error"]= {"code":16, "msg": err[16]}           
                return self.result, None
            
        if pos1== 'None' and pos2== 'None':
                self.result["error"]= {"code":17, "msg": err[17]}           
                return self.result, None
            
       
        if cardHand1== [] and  cardHand2== [] and firstGetCardEndTime== 0:
            #print 'here', pos1, pos2, cardHand1, cardHand2, uuid
            if uuid== pos1: 
                room['firstGetCardTime1']= int(time.time())     
                #room['cardHand1']= random.sample(self.data['hs_card'], 3)
                card_all= RoomModel.getRoomFirstCards(room, 1)                
                room['cardOrigin1']= card_all   
                room['cardAll1']= RoomModel.getRoomCardsAll(card_all)
                #room['cardHand1']= random.sample(card_all, 3)
                room['cardHand1']= RoomModel.getRoomRandCards(room['cardAll1'], 3)
                
                #room['cardHand1']= json.dumps(CardModel.getCardsByRand(3)) 
                RoomModel.setRoom(room_id, room)
                return None, None
            elif uuid== pos2:
                room['firstGetCardTime2']= int(time.time())     
                #room['cardHand2']= random.sample(self.data['hs_card'], 3)
                card_all= RoomModel.getRoomFirstCards(room, 2)                    
                room['cardOrigin2']= card_all 
                room['cardAll2']= RoomModel.getRoomCardsAll(card_all)  
                #room['cardHand2']= random.sample(card_all, 3)
                room['cardHand2']= RoomModel.getRoomRandCards(room['cardAll2'], 3)
                #room['cardHand2']= json.dumps(CardModel.getCardsByRand(3))
                RoomModel.setRoom(room_id, room)
                return None, None
                
            else:
                return None, None
        else:                
            if (cardHand1!= [] and uuid== pos1) or (cardHand2!= [] and uuid== pos2):
                self.result["error"]= {"code":19, "msg": err[19]}           
                return self.result, None            
            elif (cardHand1!= [] and uuid== pos2):
                #print 'here2', pos1, pos2, type(cardHand1), cardHand1, type(cardHand2), cardHand2, uuid
                
                #push
                self.push_result['uuid']= pos1
                self.push_result['service']= "main"
                self.push_result['method']= "getFirstHC"      
                
                    
                card_all= RoomModel.getRoomFirstCards(room, 1)
                room['cardAll2']= RoomModel.getRoomCardsAll(card_all)     
                room['cardOrigin2']= card_all 
                rand_card= RoomModel.getRoomRandCards(room['cardAll2'], 4)
                self.result['data']['cards']= RoomModel.getRoomCardsResult(rand_card)       
                self.result['data']['isFirst']= 0
                self.result['data']['oppCards']= RoomModel.getRoomCardsOppResult(room['cardHand1'])
                self.result['method']= 'getFirstHC'     
                
                #update cache
                room['firstGetCardTime2']= int(time.time())     
                room['firstGetCardEndTime']= int(time.time())   
                room['cardHand2']= rand_card
                room['first']= 1
                
                self.push_result['params']= {"cards": RoomModel.getRoomCardsResult(room['cardHand1']), "isFirst": 1, \
                                                            'oppCards': RoomModel.getRoomCardsOppResult(room['cardHand2'])}
                
                
                RoomModel.setRoom(room_id, room)
                
                return self.result, self.push_result                
            elif (cardHand2!= [] and uuid== pos1):
                #print 'here3', pos1, pos2, type(cardHand1), cardHand1, type(cardHand2), cardHand2, uuid
                
                #push
                self.push_result['uuid']= pos2
                self.push_result['service']= "main"
                self.push_result['method']= "getFirstHC"  
                
                card_all= RoomModel.getRoomFirstCards(room, 2)
                room['cardAll1']= RoomModel.getRoomCardsAll(card_all) 
                room['cardOrigin1']= card_all 
                rand_card= RoomModel.getRoomRandCards(room['cardAll1'], 4)
                self.result['data']['cards']= RoomModel.getRoomCardsResult(rand_card) 
                self.result['data']['isFirst']= 0
                self.result['data']['oppCards']= RoomModel.getRoomCardsOppResult(room['cardHand2'])
                self.result['method']= 'getFirstHC'
                
                #update cache
                room['firstGetCardTime1']= int(time.time())     
                room['firstGetCardEndTime']= int(time.time())   
                room['cardHand1']= rand_card
                room['first']= 2
                
                self.push_result['params']= {"cards": RoomModel.getRoomCardsResult(room['cardHand2']), "isFirst": 1, \
                                                    'oppCards': RoomModel.getRoomCardsOppResult(room['cardHand1'])}
                
             
                RoomModel.setRoom(room_id, room)    
                    
                return self.result, self.push_result
            else:
                return None, None           
                
        return None, None
    
    def confirmFirstHC(self, params):
        if(isinstance(params, dict)== False or params.get('uuid')== None or params.get('roomId')== None): 
            self.result["error"]= {"code":1, "msg": err[1]}           
            return self.result, None
        uuid= params.get('uuid')
        room_id= params.get('roomId')
        
        room= RoomModel.getRoom(room_id)
        
        pos1= room.get('pos1')
        pos2= room.get('pos2')  
            
        round= room.get('round') 
        first= room.get('first') 
                
        confirmFirstHCTime1= room.get('confirmFirstHCTime1')
        confirmFirstHCTime2= room.get('confirmFirstHCTime2')
    
        if round!= 0:
            self.result["error"]= {"code":16, "msg": err[16]}           
            return self.result, None
            
        if pos1== 'None' or pos2== 'None':
            self.result["error"]= {"code":17, "msg": err[17]}           
            return self.result, None
        if uuid== pos1:
            #print "here1----------"
            if confirmFirstHCTime2!= 0:
                #push
                self.push_result['uuid']= pos2
                self.push_result['service']= "main"
                self.push_result['method']= "startBattel"      
         

                if first==1:  
                    #对方为后手摸一张牌     
                    #new_card= RoomModel.getRoomRandCards(room['cardAll2'], 1)[0]  
                    new_card= CardModel.getCrystalCard() 
                    if new_card== None:
                        self.result["error"]= {"code":26, "msg": err[26]}           
                        return self.result, None
                    room['cardOrigin2'][new_card['uniqid']]= new_card        
                    room["cardHand2"].append(RoomModel.getRoomCardsCustomFormat(new_card))                   
                    self.push_result['params']= {"cards":RoomModel.getRoomCardResult(new_card), "crystal": 0, "round": 1, "isFirst": 0}                    
                else:
                    #对方为先手 摸牌,但不是水晶牌
                    new_card= RoomModel.getRoomRandCards(room['cardAll2'], 1)[0] 
                    room["cardHand2"].append(new_card) 
                    self.push_result['params']= {"cards":RoomModel.getRoomCardResult(new_card), "crystal": 1, "round": 1, "isFirst": 1}
            
              
                #更新自己的手牌
                if first== 1:
                    #先手，自己摸牌
                    new_card= RoomModel.getRoomRandCards(room['cardAll1'], 1)[0]
                    room["cardHand1"].append(new_card) 
                    room['crystal1']= 1
                    self.result['data']['cards']= RoomModel.getRoomCardResult(new_card)
                    self.result['data']['isFirst']= 1
                    self.result['data']['crystal']= 1
                 
                else:     
                    #后手，自己摸一张牌 ，水晶牌 
                    #new_card= RoomModel.getRoomRandCards(room['cardAll1'], 1)[0]
                    new_card= CardModel.getCrystalCard() 
                    if new_card== None:
                        self.result["error"]= {"code":26, "msg": err[26]}           
                        return self.result, None  
                    room['cardOrigin1'][new_card['uniqid']]= new_card                  
                    room["cardHand1"].append(RoomModel.getRoomCardsCustomFormat(new_card)) 
                    #对方为先手，加水晶
                    room['crystal2']= 1                                   
                    self.result['data']['cards']= RoomModel.getRoomCardResult(new_card) 
                    self.result['data']['isFirst']= 0 
                    self.result['data']['crystal']= 0
                    
                #opp
                self.result['data']['oppCards']= {'uniqid': self.push_result['params']['cards']['uniqid']}
                self.push_result['params']['oppCards']= {'uniqid': self.result['data']['cards']['uniqid']}
                                    
               
                self.result['data']['round']= 1
                self.result['method']= 'startBattel'
                
                room['confirmFirstHCTime1']= int(time.time()) 
                
                #回合
                room['round']= 1
                
                RoomModel.setRoom(room_id, room)
                return self.result, self.push_result
            
            room['confirmFirstHCTime1']= int(time.time())   
            RoomModel.setRoom(room_id, room)  
            return None, None
        elif uuid== pos2:
            #print "here2----------"
            if confirmFirstHCTime1!= 0:
                #push
                self.push_result['uuid']= pos1
                self.push_result['service']= "main"
                self.push_result['method']= "startBattel"   
                

                if first== 2:   
                    #对方为后手摸一张牌   
                    #new_card= RoomModel.getRoomRandCards(room['cardAll1'], 1)[0]
                    new_card= CardModel.getCrystalCard() 
                    if new_card== None:
                        self.result["error"]= {"code":26, "msg": err[26]}           
                        return self.result, None
                    room['cardOrigin1'][new_card['uniqid']]= new_card
                    room["cardHand1"].append(RoomModel.getRoomCardsCustomFormat(new_card))                
                    self.push_result['params']= {"cards":RoomModel.getRoomCardResult(new_card), "crystal": 0, "round": 1, "isFirst": 0}
                else:
                    #对方为先手摸牌 ,但不是水晶牌
                    new_card= RoomModel.getRoomRandCards(room['cardAll1'], 1)[0]
                    room["cardHand1"].append(new_card) 
                    self.push_result['params']= {"cards":RoomModel.getRoomCardResult(new_card), "crystal": 1, "round": 1, "isFirst": 1}  
                
                #自己为先手，摸牌           
                if first== 2:       
                    new_card= RoomModel.getRoomRandCards(room['cardAll2'], 1)[0]
                    if new_card== None:
                        self.result["error"]= {"code":26, "msg": err[26]}           
                        return self.result, None
                    room["cardHand2"].append(new_card)  
                    room['crystal2']= 1
                    self.result['data']['crystal']= 1              
                    self.result['data']['cards']= RoomModel.getRoomCardResult(new_card)
                    self.result['data']['isFirst']= 1
                else: 
                    #自己为后手，摸水晶牌
                    #new_card= RoomModel.getRoomRandCards(room['cardAll2'], 1)[0]
                    new_card= CardModel.getCrystalCard() 
                    room['cardOrigin2'][new_card['uniqid']]= new_card
                    #对方为先手，加水晶
                    room['crystal1']= 1   
                    room["cardHand2"].append(RoomModel.getRoomCardsCustomFormat(new_card))                    
                    self.result['data']['cards']= RoomModel.getRoomCardResult(new_card)
                    self.result['data']['isFirst']= 0
                    self.result['data']['crystal']= 0
                
                #opp
                self.result['data']['oppCards']= {'uniqid': self.push_result['params']['cards']['uniqid']}
                self.push_result['params']['oppCards']= {'uniqid': self.result['data']['cards']['uniqid']}
                    
                self.result['data']['round']= 1
                self.result['method']= 'startBattel'
                
                #回合
                room['round']= 1  
                room['confirmFirstHCTime2']= int(time.time())   
                RoomModel.setRoom(room_id, room)
                return self.result, self.push_result
            
            room['confirmFirstHCTime2']= int(time.time())
            RoomModel.setRoom(room_id, room)
            return None, None
        else:
            return None, None       
        
        return None, None
    
    def battleStageEvent(self, params):
        if(isinstance(params, dict)== False or params.get('uuid')== None or params.get('roomId')== None): 
            self.result["error"]= {"code":1, "msg": err[1]}           
            return self.result, None
        uuid= params.get('uuid')
        room_id= params.get('roomId')   
        
        room= RoomModel.getRoom(room_id)
        
        pos1= room.get('pos1')
        pos2= room.get('pos2')
        
        if pos1== 'None' or pos2== 'None':
            self.result["error"]= {"code":17, "msg": err[17]}           
            return self.result, None
        
        if uuid== pos1:
            uuid2= pos2
        elif uuid== pos2:
            uuid2= pos1
        else:
            self.result["error"]= {"code":6, "msg": err[6]}           
            return self.result, None
        
        #push
        self.push_result['uuid']= uuid2
        self.push_result['service']= "main"
        self.push_result['method']= "battleStageEvent"
        self.push_result['params']= params  
        
        return None, self.push_result           
    
    
    def turnStart(self, params):        
        return None 
    
    def turnEnd(self, params):
        if(isinstance(params, dict)== False or params.get('uuid')== None or params.get('roomId')== None): 
            self.result["error"]= {"code":1, "msg": err[1]}           
            return self.result, None
        uuid= params.get('uuid')
        room_id= params.get('roomId')   
        
        room= RoomModel.getRoom(room_id)
        
        pos1= room.get('pos1')
        pos2= room.get('pos2')
        last_turn= room.get('turn')            
        
        if pos1== 'None' or pos2== 'None':
            self.result["error"]= {"code":17, "msg": err[17]}           
            return self.result, None
        
 
        
        if uuid== pos1:
            uuid2= pos2
            k= "cardAll2"
            turn= 1
            if turn== last_turn:
                self.result["error"]= {"code":24, "msg": err[24]}           
                return self.result, None
            #crystal= room.get('crystal2')
        elif uuid== pos2:
            uuid2= pos1
            k= "cardAll1"
            turn= 2
            if turn== last_turn:
                self.result["error"]= {"code":24, "msg": err[24]}           
                return self.result, None
            #crystal= room.get('crystal1')
        else:
            self.result["error"]= {"code":6, "msg": err[6]}           
            return self.result, None
        
        #push
        obj= {}
        #obj['cards']= CardModel.getCardsByRand(1)[0]
       
        #print type(room.get(k)),len(room.get(k))
        if len(room.get(k))==0:
            obj['cards']= ''
        else:        
            obj['cards']= RoomModel.getRoomCardResult(RoomModel.getRoomRandCards(room.get(k), 1)[0])
         
        room['turn']= turn   
        
        #回合数加1
        if room['turnStatus']== 1:
            room['round']= room.get('round')+ 1
            room['turnStatus']= 0
        else:
            room['turnStatus']= 1
        
        #回复水晶
        if uuid== pos1:
            room['crysta2']= min(10, room.get('round'))
        elif uuid== pos2:
            room['crysta1']= min(10, room.get('round'))
        
        obj['crystal']= min(10, room.get('round'))
        
        obj['round']= room.get('round')
                
        self.push_result['uuid']= uuid2
        self.push_result['service']= "main"
        self.push_result['method']= "turnStart"
        self.push_result['params']= obj    
        
        RoomModel.setRoom(room_id, room)
        
        return None, self.push_result
    
    def atkTarget(self, params):
        if(isinstance(params, dict)== False or params.get('uuid')== None or params.get('roomId')== None or params.get('attacker')== None or params.get('target')== None): 
            self.result["error"]= {"code":1, "msg": err[1]}           
            return self.result, None
        uuid= params.get('uuid')
        attacker_cardId= int(params.get('attacker').get('cardId', 0))
        target_cardId= int(params.get('target').get('cardId', 0))
        
        attacker_id= int(params.get('attacker').get('uniqid', 0))
        target_id= int(params.get('target').get('uniqid', 0))
        
        attacker_type= int(params.get('attacker').get('type', 0))
        target_type= int(params.get('target').get('type', 0))
        #do card type checking and losts of other things    
        
        
        room_id= params.get('roomId') 
        room= RoomModel.getRoom(room_id)
        
        pos1= room.get('pos1')
        pos2= room.get('pos2')    
        if uuid!= pos1 and uuid != pos2:
            self.result["error"]= {"code":6, "msg": err[6]}           
            return self.result, None    
        
        if pos1== 'None' or pos2== 'None':
            self.result["error"]= {"code":17, "msg": err[17]}           
            return self.result, None
        
        if attacker_type!= 0:  
            if uuid== pos1: 
                attacker_card_pos, attacker_card_info= RoomModel.getRoomCardById(room.get('cardPlay1'), attacker_id)
            else:
                attacker_card_pos, attacker_card_info= RoomModel.getRoomCardById(room.get('cardPlay2'), attacker_id)
            if(attacker_card_info== None):
                self.result["error"]= {"code":17, "msg": err[17]}           
                return self.result, None
        else:
            attacker_card_pos, attacker_card_info= None, None
            
        if target_type!= 0: 
            if uuid== pos2: 
                target_card_pos, target_card_info= RoomModel.getRoomCardById(room.get('cardPlay2'), target_id)
            else:
                target_card_pos, target_card_info= RoomModel.getRoomCardById(room.get('cardPlay1'), target_id)            
            if(target_card_info== None):
                self.result["error"]= {"code":17, "msg": err[17]}           
                return self.result, None
        else:
            target_card_pos, target_card_info= None, None 
              
        return self.doAtkTarget(room, params, uuid, pos1, pos2, attacker_card_pos, target_card_pos, attacker_card_info, target_card_info, attacker_type, target_type)

    
    def doAtkTarget(room, params, uuid, uuid2, pos1, pos2, attacker_card_pos, target_card_pos, attacker_card_info, target_card_info, attacker_type, target_type):
        #todo paramers check
        #type=0为英雄,type=1为随从卡，type=2 法术卡， typ=3 奥秘卡    
        #英雄攻击英雄
        if attacker_type== 0 and target_type== 0:
            damge= RoomModel.getRoomHeroAtkByPos(1)
            damge2= RoomModel.getRoomHeroAtkByPos(2)
            
            if uuid== pos1:
                uuid2= pos2
                room['hp1']= int(room['hp1'])- damge2
                room['hp1']= max(0, room['hp1'])
                    
                room['hp2']= int(room['hp2'])- damge
                room['hp2']= max(0, room['hp2'])
                    
                params['attacker']['hp']= room['hp1']
                params['target']['hp']= room['hp2']
            elif uuid== pos2:
                uuid2= pos1
                room['hp1']= int(room['hp1'])- damge
                room['hp1']= max(0, room['hp1'])
                    
                room['hp2']= int(room['hp2'])- damge2
                room['hp2']= max(0, room['hp2'])
                    
                params['attacker']['hp']= room['hp2']
                params['target']['hp']= room['hp1']
        #英雄攻击怪物
        elif attacker_type== 0 and target_type== 1:
            damge= RoomModel.getRoomHeroAtkByPos(1)
            damge2= target_card_info.get('atk')  
            
            if uuid== pos1:
                uuid2= pos2
                #攻击方
                room['hp1']= int(room['hp1'])- damge2
                room['hp1']= max(0, room['hp1'])
                
                #被攻击方
                room['cardPlay2'][target_card_pos]['hp']= room['cardPlay2'][target_card_pos]['hp']- damge
                room['cardPlay2'][target_card_pos]['hp']= max(room['cardPlay2'][target_card_pos]['hp'], 0)
                #room['hp2']= int(room['hp2'])- damge
                #room['hp2']= max(0, room['hp2'])
                    
                params['attacker']['hp']= room['hp1']
                params['target']['hp']= room['cardPlay2'][target_card_pos]['hp']
            elif uuid== pos2:
                uuid2= pos1
                room['hp2']= int(room['hp2'])- damge2
                room['hp2']= max(0, room['hp2'])
                    
                room['cardPlay2'][target_card_pos]['hp']= room['cardPlay2'][target_card_pos]['hp']- damge
                room['cardPlay2'][target_card_pos]['hp']= max(room['cardPlay2'][target_card_pos]['hp'], 0)
                #room['hp2']= int(room['hp2'])- damge2
                #room['hp2']= max(0, room['hp2'])
                    
                params['attacker']['hp']= room['hp2']
                params['target']['hp']= room['cardPlay2'][target_card_pos]['hp']
        #怪物攻击英雄
        elif attacker_type== 1 and target_type== 0:
            damge= attacker_card_info.get('atk') 
            damge2= RoomModel.getRoomHeroAtkByPos(2)
            
            if uuid== pos1:
                uuid2= pos2

                room['cardPlay1'][attacker_card_pos]['hp']= room['cardPlay1'][attacker_card_pos]['hp']- damge2
                room['cardPlay1'][attacker_card_pos]['hp']= max(room['cardPlay1'][attacker_card_pos]['hp'], 0)
                
                room['hp2']= int(room['hp2'])- damge
                room['hp2']= max(0, room['hp2'])

                    
                params['attacker']['hp']= room['cardPlay1'][attacker_card_pos]['hp']
                params['target']['hp']= room['hp2']
            elif uuid== pos2:
                uuid2= pos1

                room['cardPlay2'][attacker_card_pos]['hp']= room['cardPlay2'][attacker_card_pos]['hp']- damge2
                room['cardPlay2'][attacker_card_pos]['hp']= max(room['cardPlay2'][attacker_card_pos]['hp'], 0)
                    
                room['hp2']= int(room['hp2'])- damge
                room['hp2']= max(0, room['hp2'])
   
                    
                params['attacker']['hp']= room['cardPlay2'][attacker_card_pos]['hp']
                params['target']['hp']= room['hp2']
     
        #怪物攻击怪物
        elif attacker_type== 1 and target_type== 1:
            damge= attacker_card_info.get('atk')
            damge2= target_card_info.get('atk')  
            
            if uuid== pos1:
                uuid2= pos2

                room['cardPlay1'][attacker_card_pos]['hp']= room['cardPlay1'][attacker_card_pos]['hp']- damge2
                room['cardPlay1'][attacker_card_pos]['hp']= max(room['cardPlay1'][attacker_card_pos]['hp'], 0)
                
                room['cardPlay2'][target_card_pos]['hp']= room['cardPlay2'][target_card_pos]['hp']- damge
                room['cardPlay2'][target_card_pos]['hp']= max(room['cardPlay2'][target_card_pos]['hp'], 0)

                    
                params['attacker']['hp']= room['cardPlay1'][attacker_card_pos]['hp']
                params['target']['hp']= room['cardPlay2'][target_card_pos]['hp']
            elif uuid== pos2:
                uuid2= pos1

                room['cardPlay2'][attacker_card_pos]['hp']= room['cardPlay2'][attacker_card_pos]['hp']- damge2
                room['cardPlay2'][attacker_card_pos]['hp']= max(room['cardPlay2'][attacker_card_pos]['hp'], 0)
                    
                room['cardPlay1'][target_card_pos]['hp']= room['cardPlay1'][target_card_pos]['hp']- damge
                room['cardPlay1'][target_card_pos]['hp']= max(room['cardPlay1'][target_card_pos]['hp'], 0)   
                    
                params['attacker']['hp']= room['cardPlay2'][attacker_card_pos]['hp']
                params['target']['hp']= room['cardPlay1'][target_card_pos]['hp']
        else:
            return None, None 
        
        #push               
        self.push_result['uuid']= uuid2
        self.push_result['service']= "main"
        self.push_result['method']= "atkTarget"
        self.push_result['params']= params  
                
        self.result['data']= params
        self.result['method']= 'atkTarget'
        
        RoomModel.setRoom(room_id, room)
        
        return self.result, self.push_result
              
    
    def putCardOnDesk(self, params):
        if(isinstance(params, dict)== False or params.get('uuid')== None or params.get('roomId')== None or params.get('card')== None):                                                                    
            self.result["error"]= {"code":1, "msg": err[1]}           
            return self.result, None
        
        uuid= params.get('uuid')     
           
        cards= params.get('card')        
        if isinstance(cards, dict)== False:
            self.result["error"]= {"code":1, "msg": err[1]}           
            return self.result, None
        
        uniqid= cards.get('uniqid')        
        if uniqid== None:
            self.result["error"]= {"code":1, "msg": err[1]}           
            return self.result, None
        
        room_id= params.get('roomId')   
        room= RoomModel.getRoom(room_id)        
        
        pos1= room.get('pos1')
        pos2= room.get('pos2')
        
        if pos1== 'None' or pos2== 'None':
            self.result["error"]= {"code":17, "msg": err[17]}           
            return self.result, None        

        if uuid== pos1:
            uuid2= pos2
                        
            pos, info= RoomModel.getRoomCardWithInfoById(room.get('cardHand1'), room.get('cardOrigin1'), uniqid)  
                     
            skill_id= info.get('skillId') 
            #skill= SkillModel.getSkillById(skill_id)
            skill= SkillModel.getSkillById(2)   
            effects= SkillModel.parseEffect(skill)  
            
            effect_stack= room['effect1']
                
            if pos== None or info== None:
                self.result["error"]= {"code":22, "msg": err[22]}           
                return self.result, None  
            
            '''
            #not enough crystal
            if info.get('cost')< room.get('crystal1'):
                self.result["error"]= {"code":23, "msg": err[23]}           
                return self.result, None             
            '''
                         
            ret= SkillModel.triggerEffect(room, uniqid, effects, 1)  
            
            update_result= RoomModel.updateRoomCardsPlay(room, room['cardHand1'] , room['cardPlay1'] , cards)  
            if update_result== True:
                RoomModel.addRoomEffectToStack(effect_stack, effects)
            desktop_opp= room.get('cardPlay2')       
            desktop_self= room.get('cardPlay1') 
            
            #hand_opp= room.get('cardHand2')       
            #hand_self= room.get('cardHand1')  
            
            room['crystal1']= room['crystal1']- info.get('cost') 
            room['crystal1']= max(0, room['crystal1'])      
            
            self.result['data']["desktopSelf"]= RoomModel.getRoomCardsPlayResult(desktop_self)
            self.result['data']["desktopOpp"]= RoomModel.getRoomCardsPlayResult(desktop_opp)
            self.result['data']["card"]= cards 
        elif uuid== pos2:
            uuid2= pos1
            
            pos, info= RoomModel.getRoomCardWithInfoById(room.get('cardHand2'), room.get('cardOrigin2'), uniqid)
            
            skill_id= info.get('skillId')  
            #skill= SkillModel.getSkillById(skill_id)
            skill= SkillModel.getSkillById(2)       
            effects= SkillModel.parseEffect(skill)          
                    
            effect_stack= room['effect2']
            
            if pos== None or info== None:
                self.result["error"]= {"code":22, "msg": err[22]}           
                return self.result, None  
            
            '''
            #not enough crystal
            if info.get('cost')< room.get('crystal2'):
                self.result["error"]= {"code":23, "msg": err[23]}           
                return self.result, None  
            '''
            ret= SkillModel.triggerEffect(room, uniqid, effects, 2)
            
            update_result= RoomModel.updateRoomCardsPlay(room, room['cardHand2'] , room['cardPlay2'] , cards)  
            if update_result== True:
                RoomModel.addRoomEffectToStack(effect_stack, effects)
           
            desktop_self= room.get('cardPlay2') 
            desktop_opp= room.get('cardPlay1') 
            
            #hand_opp= room.get('cardHand1')       
            #hand_self= room.get('cardHand2') 
            
            room['crystal2']= room['crystal2']- info.get('cost')
            room['crystal2']= max(0, room['crystal2'])
            
            self.result['data']["desktopSelf"]= RoomModel.getRoomCardsPlayResult(desktop_self)
            self.result['data']["desktopOpp"]= RoomModel.getRoomCardsPlayResult(desktop_opp) 
            self.result['data']["card"]= cards 
        else:
            self.result["error"]= {"code":6, "msg": err[6]}           
            return self.result, None
        
        #push               
        self.push_result['uuid']= uuid2
        self.push_result['service']= "main"
        self.push_result['method']= "desktopChange"
        self.push_result['params']["desktopSelf"]= RoomModel.getRoomCardsPlayResult(desktop_opp)    
        self.push_result['params']["desktopOpp"]= RoomModel.getRoomCardsPlayResult(desktop_self)  
        self.push_result['params']["card"]= cards   
            
        self.result['method']= 'desktopChange'
        
        RoomModel.setRoom(room_id, room)
        
        return self.result, self.push_result

    def changeFirstHC(self, params):
        if(isinstance(params, dict)== False or params.get('uuid')== None or params.get('roomId')== None \
                        or params.get('uniqid')== None  or isinstance(params.get('cards'), list)== False): 
            self.result["error"]= {"code":1, "msg": err[1]}           
            return self.result, None
        uuid= params.get('uuid')
        uniqid= params.get('uniqid')
        cards= params.get('cards')
        
        room_id= params.get('roomId')   
        room= RoomModel.getRoom(room_id)        
        
        pos1= room.get('pos1')
        pos2= room.get('pos2')
        
        cardHand1=  room.get('cardHand1')
        cardHand2=  room.get('cardHand2')
        
        count= len(cards)
            
        if pos1== 'None' or pos2== 'None':
            self.result["error"]= {"code":17, "msg": err[17]}           
            return self.result, None      
      
        if uuid== pos1:
            uuid2= pos2 
                    
            cardHand1= room.get('cardHand1')
            if cardHand1== []:
                self.result["error"]= {"code":17, "msg": err[17]}           
                return self.result, None
            else:
                #new_cards= CardModel.getCardsByRand(count)
                new_cards= RoomModel.getRoomRandCards(room['cardAll1'], count)
            
                for k, c in enumerate(cardHand1): 
                    if cards.count(c.get('uniqid'))> 0:
                        tmp= cardHand1.pop(k)
                        #被换的排放回仓库
                        room['cardAll1'].append(tmp)
                        
                cardHand1+= new_cards

            room["cardHand1"]= cardHand1
        elif uuid== pos2:
            uuid2= pos1         
            cardHand2= room.get('cardHand2')
            if cardHand2== []:
                self.result["error"]= {"code":17, "msg": err[17]}           
                return self.result, None
            else:
                #new_cards= CardModel.getCardsByRand(count)
                new_cards= RoomModel.getRoomRandCards(room['cardAll2'], count)            
                for k, c in enumerate(cardHand2): 
                    if cards.count(c.get('uniqid'))> 0:
                        tmp= cardHand2.pop(k)
                        #被换的排放回仓库
                        room['cardAll2'].append(tmp)
                        
                cardHand2+= new_cards   
            room["cardHand2"]= cardHand2    
        else:
            self.result["error"]= {"code":6, "msg": err[6]}           
            return self.result, None
        
    
        self.result['data']["cards"]= new_cards 
        self.result['method']= 'changeFirstHC'
        #pprint(room["cardHand1"])
        #pprint(room["cardHand2"])
        
        RoomModel.setRoom(room_id, room)
        
        return self.result, None
    
    
    


# -*- coding: utf-8 -*-
import sys
import os
import random
import time
import json
from pprint import pprint
from errors import err
#<class 'model.BaseModel.BaseModel'>
from model.BaseModel import BaseModel
from model.CardModel import CardModel
from model.RoomModel import RoomModel
from model.SkillModel import SkillModel
from pymongo.errors import AutoReconnect
						
class SkillModel(BaseModel): 
	def __init__(self): 
		super(SkillModel, self).__init__()	
		
	@classmethod	
	def getSkillById(self, _id):
		if(_id== None):      
			return None
		
		try:
			data= self.mongodb['hs_skill'].find_one({"_id": _id})		
			return  data
		except AutoReconnect:
			self.log.error("mongodb error, AutoReconnect!")
			
	@classmethod	
	def parseEffect(self, uniqid, skill):
		if isinstance(skill, dict)== False:
			return {}
		'''
		script= skill.get('script')
		if script== None:
			return {}
		'''
		effect= []
			
		obj= {}
		#技能id
		obj['skill_id']= skill.get('skill_id')
		
		obj['skill_name']= skill.get('name')
		#触发条件	
		obj['trigger_condition']= 0
		#触发时间
		#obj['trigger_time']= 0
		#触发目标
		obj['target']= ''
		#效果类型
		obj['type']= 0
		#数值
		obj['value']= 0
		#数值来源
		obj['value_source']= 0
		#触发的事件
		obj['event']= None
		
		effect.append(obj)
		return effect
	
	@classmethod	
	def getEffectByTriggerCondition(self, effects, condition):
		if isinstance(effects, dict)== False or isinstance(condition, int)== False:
			return []
		
		ret= []
		for index, val in enumerate(effects):
			trigger_condition= int(val.get('trigger_condition'))
			if(trigger_condition== condition):
				ret.append(val)
		return ret
	
			
	@classmethod	
	def parseSkill(self, skill):
		if isinstance(skill, dict)== False:
			return None
		obj= {}
		obj['skill_id']= skill.get('_id')
		obj['skill_name']= skill.get('name')
		obj['skill_text']= skill.get('skillText')
		obj['script']= skill.get('script')
		return obj
	
	@classmethod	
	def triggerEffect(self, _id):
		pass

	@classmethod	
	def triggerEvent(self, _id):
		pass

# -*- coding: utf-8 -*-

from  django.http import HttpResponse
from  HeroModel import HeroModel
import json

from vo import *
from base import Base
import bson

class HeroService(Base):
	@classmethod
	def getAllHeros(self):
		hero = HeroModel()
		ret= hero.getAllHeros()
		obj= HeroVO()
		ret= makeVo(ret, obj)
		return ret
	
	@classmethod
	def getAllSystemAndUserHeros(self, params):
		uuid= params[0]
		hero = HeroModel()
		ret= hero.getAllSystemAndUserHeros(uuid)
		obj= HeroVO()
		ret= makeVo(ret, obj)
		return ret

	@classmethod
	def getSystemOrUserHerosById(self, params):
		uuid= params[0]
		id= params[1]

		if uuid== None or id== None:
			return -1

		hero = HeroModel()
		ret= hero.getSystemOrUserHerosById(uuid, id)

		obj= HeroVO()
		ret= makeVo(ret, obj)
		return ret

	@classmethod
	def updateUserHeros(self, params):
		uuid, id, cardIds= params[0], params[1], params[2]
		if uuid== None or id== None or cardIds== None:
			return -1

		hero = HeroModel()
		ret= hero.updateUserHeros(id, cardIds)
		if isinstance(ret, dict)== True:
			params= [uuid, id]
			return self.getSystemOrUserHerosById(params)	
		else:
			return -2

	@classmethod
	#def createUserHeros(self, uuid, job, name, cardIds):
	def createUserHeros(self, params):
		uuid, job, name, cardIds= params[0], params[1], params[2], params[3]
		'''
		print (uuid), (job), (name), (cardIds)
		file_object = open('D:\\thefile.txt', 'w+')
		file_object.write(uuid)
		file_object.write(name)
		file_object.write(job)
		file_object.write(str(type(cardIds)))
		file_object.close()
		'''
		if uuid== None or job== None or name== None or cardIds== None:
			return -1
		
		#if(cardIds.find(',')<0):
			#return -2

		name= name.strip()
		#ids= cardIds.split(',')
		hero = HeroModel()
		ret= hero.createUserHeros(uuid, job, name, cardIds)
		if isinstance(ret, int)== True:
			params= [uuid, ret]
			return self.getSystemOrUserHerosById(params)	
		else:
			return -2
		




# -*- coding: utf-8 -*-
import sys
import os
import random
import time
import json
import copy
from pprint import pprint
from errors import err
#<class 'model.BaseModel.BaseModel'>
from model.BaseModel import BaseModel
from model.RoomModel import RoomModel
from model.CardModel import CardModel
from model.FightModel import FightModel
from pymongo.errors import AutoReconnect
						
class EffectHelperModel(BaseModel): 
	def __init__(self): 
		super(EffectHelperModel, self).__init__()		
	
	@classmethod
	def __getEffectPointerTarget(self, cards, pointer, uniqids, object):
		if isinstance(cards, list)== False or isinstance(pointer, dict)== False or isinstance(uniqids, list)== False:
			return []
		all_uniqids= RoomModel.getRoomCardAllUniqid(cards)
			
	
		pointer_type= pointer.get('pointerType')
		pointer_value= pointer.get('pointerValue')
		if str(pointer_type)=='' or int(pointer_value)<= 0:
			self.log.error('doEffectAddAtk, Configuration error')
			return []
			
		if pointer_type== 'playerPickX':
			print 'here'
			tmp= [val for val in uniqids if val in all_uniqids]
			if len(tmp)!= len(uniqids):
				return []	
		elif pointer_type== 'single':
			pass			
		elif pointer_type== 'all':
			tmp= [val for val in uniqids if val in all_uniqids]
			uniqids= all_uniqids
		elif pointer_type== 'randomX':
			count= max(len(all_uniqids), pointer_value)
			count= min(1, pointer_value)
			uniqids= random.sample(all_uniqids, pointer_value)
		elif pointer_type== 'others':
			uniqids  = [val for val in all_uniqids if val != object]			
		else:
			return []
		return uniqids
	
	@classmethod
	def getEffectTarget(self, room, pos, effect, uniqids= []):
		if isinstance(room, dict)== False or isinstance(effect, dict)== False or (pos!=1 and pos!= 2):
			return []
		
		range= effect['targetA'].get('range')
		pointer= effect['targetA'].get('pointer')
		object= effect['object']
		print pointer, range, object
		
		if isinstance(pointer, dict)== True:
			field= range.get('field')
			role= range.get('role')
			camp= range.get('camp')
			if pos== 1:
				if field== 'battleField':
					if camp== None or camp== 'all':
						print 'extend1'
						cards= []
						cards.extend(room['cardPlay1'])
						cards.extend(room['cardPlay2'])
					elif camp== 'me':
						k= 'cardPlay1'
						cards= copy.deepcopy(room[k]) 
					elif camp== 'enemy':	
						k= 'cardPlay2'
						cards= copy.deepcopy(room[k]) 
				else:
					return []		
			else:
				if field== 'battleField':
					if camp== None or camp== 'all':
						print 'extend2'
						cards= []
						cards.extend(room['cardPlay1'])
						cards.extend(room['cardPlay2'])
					elif camp== 'me':
						k= 'cardPlay2'
						cards= copy.deepcopy(room[k]) 
					elif camp== 'enemy':	
						k= 'cardPlay1'
						cards= copy.deepcopy(room[k])	
				else:
					return []
			print range, pointer, camp
				
			#cards= copy.deepcopy(room[k]) 

			if isinstance(role, str)== True:
				role= [role]
			
			print '__getEffectPointerTarget', cards, role
			cards= [val for val in cards if role.count(val.get('type')> 0)]
			
			return self.__getEffectPointerTarget(cards, pointer, uniqids, object)
		else:
			if range.get('thisCard')== 1:
				return [object]
		
	@classmethod
	def getEffectValue(self, room, pos, effect, uniqids= []):
		if isinstance(room, dict)== False or isinstance(effect, dict)== False or (pos!=1 and pos!= 2):
			return 0
		
		values= effect.get('value')
		if isinstance(values, dict)== True:
			if values.get('valueType')== 'n':				
				value= int(values.get('value'))
				if value<= 0:
					value= 1
			elif values.get('valueType')== 'range':
				pass
			else:
				pass
		else:
			value= 1
				
		return value	
	
		
		

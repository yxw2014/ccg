# -*- coding: utf-8 -*-
import sys
import os
import random
import time
import json
from pprint import pprint
from errors import err
from  const import *
from config import *
#<class 'model.BaseModel.BaseModel'>
from model.BaseModel import BaseModel
from model.RoomModel import RoomModel
from model.CardModel import CardModel
from model.FightModel import FightModel
from model.EffectHelperModel import EffectHelperModel
from pymongo.errors import AutoReconnect

						
class EffectModel(BaseModel): 
	def __init__(self): 
		super(EffectModel, self).__init__()			
	
	'''
	#冲锋
	@classmethod		
	def doEffectDash(self, room, pos, effect, uniqids= []):
		if isinstance(room, dict)== False or isinstance(effect, dict)== False or (pos!=1 and pos!= 2):
			return False
		
		range= effect['targetA'].get('range')
		pointer= effect['targetA'].get('pointer')		
		ids= str(range.get('cardID'))
		
		thisCard= range.get('thisCard')
		uniqid= effect['object']
		
		if thisCard== 1:
			ids= [uniqid]

		if pos== 1:
			for index, val in enumerate(ids):
				p= RoomModel.getRoomCardPosById(room['cardPlay1'], val)
				if p>0:
					room['cardPlay1'][p]['aTime']= 1
					room['cardPlay1'][p]['skill'].append(effect['skill_id'])
		else:
			for index, val in enumerate(ids):
				p= RoomModel.getRoomCardPosById(room['cardPlay2'], val)
				if p>0:
					room['cardPlay2'][p]['aTime']= 1
					room['cardPlay2'][p]['skill'].append(effect['skill_id'])		
		return True
	
	#嘲讽
	@classmethod		
	def doEffectTaunt(self, room, pos, effect, uniqids= []):
		if isinstance(room, dict)== False or isinstance(effect, dict)== False or (pos!=1 and pos!= 2):
			return False
		
		range= effect['targetA'].get('range')
		pointer= effect['targetA'].get('pointer')		
		ids= str(range.get('cardID'))
		
		thisCard= range.get('thisCard')
		uniqid= effect['object']
		
		if thisCard== 1:
			ids= [uniqid]

		if pos== 1:
			for index, val in enumerate(ids):
				p= RoomModel.getRoomCardPosById(room['cardPlay1'], val)
				if p>0:
					room['cardPlay1'][p]['status']= STATUS_TAUNT
					room['cardPlay1'][p]['skill'].append(effect['skill_id'])
		else:
			for index, val in enumerate(ids):
				p= RoomModel.getRoomCardPosById(room['cardPlay2'], val)
				if p>0:
					room['cardPlay2'][p]['status']= STATUS_TAUNT
					room['cardPlay2'][p]['skill'].append(effect['skill_id'])		
		return True
	'''
	
	#冲锋
	@classmethod		
	def doEffectDash(self, room, pos, effect, uniqids= []):
		if isinstance(room, dict)== False or isinstance(effect, dict)== False or (pos!=1 and pos!= 2):
			return False
		
		range= effect['targetA'].get('range')
		pointer= effect['targetA'].get('pointer')	
		object= effect['object']		
		
		uniqids= EffectHelperModel.getEffectTarget(room, pos, effect, uniqids)
		
		value= EffectHelperModel.getEffectValue(room, pos, effect, uniqids)
		
		print 'doEffectDash--------------------------', uniqids, value
		
		if value <= 0:
			return False	

		k, k2= EffectHelperModel.getEffectPointer(pos, pointer, range)		
		if k== None and k2== None:
			self.log.error(str(effect))
			return False
					
		if k!= None:		
			for index, uniqid in enumerate(uniqids):
				p, v= RoomModel.getRoomCardById(room[k], uniqid)
				print p, v
				if p== None:
					continue
				room[k][p]['aTime']= 1

				
		if k2!= None:
			for index, uniqid in enumerate(uniqids):
				p, v= RoomModel.getRoomCardById(room[k2], uniqid)
				print p, v
				if p== None:
					continue
				room[k2][p]['aTime']= 1
		
		return True
					
		
	#嘲讽
	@classmethod		
	def doEffectTaunt(self, room, pos, effect, uniqids= []):
		if isinstance(room, dict)== False or isinstance(effect, dict)== False or (pos!=1 and pos!= 2):
			return False
		
		range= effect['targetA'].get('range')
		pointer= effect['targetA'].get('pointer')	
		object= effect['object']		
		
		uniqids= EffectHelperModel.getEffectTarget(room, pos, effect, uniqids)
		
		value= EffectHelperModel.getEffectValue(room, pos, effect, uniqids)
		
		print 'doEffectTaunt--------------------------', uniqids, value
		
		if value <= 0:
			return False	

		k, k2= EffectHelperModel.getEffectPointer(pos, pointer, range)		
		if k== None and k2== None:
			self.log.error(str(effect))
			return False
					
		if k!= None:		
			for index, uniqid in enumerate(uniqids):
				p, v= RoomModel.getRoomCardById(room[k], uniqid)
				print p,v
				if p== None:
					continue
				room[k][p]['status']= room[k][p]['status'] | STATUS_TAUNT

				
		if k2!= None:
			for index, uniqid in enumerate(uniqids):
				p, v= RoomModel.getRoomCardById(room[k2], uniqid)
				print p,v
				if p== None:
					continue
				room[k2][p]['status']= room[k2][p]['status'] | STATUS_TAUNT
		
		return True
		
	#加护甲
	@classmethod		
	def doEffectAddHp(self, room, pos, effect, uniqids= []):
		if isinstance(room, dict)== False or isinstance(effect, dict)== False or (pos!=1 and pos!= 2):
			return False
		
		range= effect['targetA'].get('range')
		pointer= effect['targetA'].get('pointer')	
		object= effect['object']		
		
		uniqids= EffectHelperModel.getEffectTarget(room, pos, effect, uniqids)
		
		value= EffectHelperModel.getEffectValue(room, pos, effect, uniqids)
		
		print 'doEffectAddHp--------------------------', uniqids, value
		
		if value <= 0:
			return False	

		k, k2= EffectHelperModel.getEffectPointer(pos, pointer, range)		
		if k== None and k2== None:
			self.log.error(str(effect))
			return False
					
		if k!= None:		
			for index, uniqid in enumerate(uniqids):
				p, v= RoomModel.getRoomCardById(room[k], uniqid)
				print p,v
				if p== None:
					continue
				room[k][p]['hp']= room[k][p]['hp']+ value
				room[k][p]['hp']= min(int(config['GAME']['maxhp']), room[k][p]['hp'])
				
		if k2!= None:
			for index, uniqid in enumerate(uniqids):
				p, v= RoomModel.getRoomCardById(room[k2], uniqid)
				print p,v
				if p== None:
					continue
				room[k2][p]['hp']= room[k2][p]['hp']+ value
				room[k2][p]['hp']= min(int(config['GAME']['maxhp']), room[k2][p]['hp'])
		
		return True
	
	#加护甲
	@classmethod		
	def doEffectArmor(self, room, pos, effect, uniqids= []):
		if isinstance(room, dict)== False or isinstance(effect, dict)== False or (pos!=1 and pos!= 2):
			return False
		
		range= effect['targetA'].get('range')
		pointer= effect['targetA'].get('pointer')	
		object= effect['object']		
		
		uniqids= EffectHelperModel.getEffectTarget(room, pos, effect, uniqids)
		
		value= EffectHelperModel.getEffectValue(room, pos, effect, uniqids)
		
		print 'doEffectArmor--------------------------', uniqids, value
		
		if value <= 0:
			return False
			
		k, k2= EffectHelperModel.getEffectPointer(pos, pointer, range)		
		if k== None and k2== None:
			self.log.error(str(effect))
			return False	
				
		if k!= None:		
			for index, uniqid in enumerate(uniqids):
				p, v= RoomModel.getRoomCardById(room[k], uniqid)
				print p,v
				if p== None:
					continue
				room[k][p]['armor']= room[k][p]['armor']+ value
				
		if k2!= None:
			for index, uniqid in enumerate(uniqids):
				p, v= RoomModel.getRoomCardById(room[k2], uniqid)
				print p,v
				if p== None:
					continue
				room[k2][p]['armor']= room[k2][p]['armor']+ value
		
		return True
	
	#冰冻
	@classmethod		
	def doEffectStun(self, room, pos, effect, uniqids= []):
		if isinstance(room, dict)== False or isinstance(effect, dict)== False or (pos!=1 and pos!= 2):
			return False
		
		range= effect['targetA'].get('range')
		pointer= effect['targetA'].get('pointer')	
		object= effect['object']		
		
		uniqids= EffectHelperModel.getEffectTarget(room, pos, effect, uniqids)
		
		value= EffectHelperModel.getEffectValue(room, pos, effect, uniqids)
		
		print 'doEffectWindfury--------------------------', uniqids, value
		
		if value <= 0:
			return False	
				
		k, k2= EffectHelperModel.getEffectPointer(pos, pointer, range)		
		if k== None and k2== None:
			self.log.error(str(effect))
			return False
		
		continuous= EffectHelperModel.getEffectContinuous(room, pos, effect, uniqids)
					
		if k!= None:		
			for index, uniqid in enumerate(uniqids):
				p, v= RoomModel.getRoomCardById(room[k], uniqid)
				print p,v
				if p== None:
					continue
				room[k][p]['status']= room[k][p]['status'] | STATUS_STUN
				
				if isinstance(continuous, int)== True:
					EffectHelperModel.setEffectTurn(room, uniqid, continuous, EFFECT_TYPE_STUN)
				
				
		if k2!= None:
			for index, uniqid in enumerate(uniqids):
				p, v= RoomModel.getRoomCardById(room[k2], uniqid)
				print p,v
				if p== None:
					continue
				room[k2][p]['status']= room[k2][p]['status'] | STATUS_STUN
				
				if isinstance(continuous, int)== True:
					EffectHelperModel.setEffectTurn(room, uniqid, continuous, EFFECT_TYPE_STUN)
		
		return True
	

	#风怒
	@classmethod		
	def doEffectWindfury(self, room, pos, effect, uniqids= []):
		if isinstance(room, dict)== False or isinstance(effect, dict)== False or (pos!=1 and pos!= 2):
			return False
		
		range= effect['targetA'].get('range')
		pointer= effect['targetA'].get('pointer')	
		object= effect['object']		
		
		uniqids= EffectHelperModel.getEffectTarget(room, pos, effect, uniqids)
		
		value= EffectHelperModel.getEffectValue(room, pos, effect, uniqids)
		
		print 'doEffectWindfury--------------------------', uniqids, value
		
		if value <= 0:
			return False	
		
		k, k2= EffectHelperModel.getEffectPointer(pos, pointer, range)		
		if k== None and k2== None:
			self.log.error(str(effect))
			return False
					
		if k!= None:		
			for index, uniqid in enumerate(uniqids):
				p, v= RoomModel.getRoomCardById(room[k], uniqid)
				print p,v
				if p== None:
					continue
				room[k][p]['status']= room[k][p]['status'] | STATUS_WINDFURY
				
		if k2!= None:
			for index, uniqid in enumerate(uniqids):
				p, v= RoomModel.getRoomCardById(room[k2], uniqid)
				print p,v
				if p== None:
					continue
				room[k2][p]['status']= room[k2][p]['status'] | STATUS_WINDFURY
		
		return True

	#火球术
	@classmethod		
	def doEffectAddDamage(self, room, pos, effect, uniqids= []):
		if isinstance(room, dict)== False or isinstance(effect, dict)== False or (pos!=1 and pos!= 2):
			return False
		
		range= effect['targetA'].get('range')
		pointer= effect['targetA'].get('pointer')	
		object= effect['object']		
		
		uniqids= EffectHelperModel.getEffectTarget(room, pos, effect, uniqids)
		
		value= EffectHelperModel.getEffectValue(room, pos, effect, uniqids)
		
		print 'doEffectAddDamage--------------------------', uniqids, value
		
		if value <= 0:
			return False
		
		k, k2= EffectHelperModel.getEffectPointer(pos, pointer, range)		
		if k== None and k2== None:
			self.log.error(str(effect))
			return False
					
		if k!= None:		
			for index, uniqid in enumerate(uniqids):
				p, v= RoomModel.getRoomCardById(room[k], uniqid)
				print p,v
				if p== None:
					continue
		
				FightModel.doDamage(room[k][p], value)
				
				if field== 'battleField':
					RoomModel.checkCardDie(room, pos, v)
			
		if k2!= None:
			for index, uniqid in enumerate(uniqids):
				p, v= RoomModel.getRoomCardById(room[k2], uniqid)
				print p,v
				if p== None:
					continue
		
				FightModel.doDamage(room[k2][p], value)
				if field== 'battleField':
					RoomModel.checkCardDie(room, pos, v)			
		
		return True
	
	#召唤
	@classmethod		
	def doEffectSummon(self, room, pos, effect, uniqids= []):
		if isinstance(room, dict)== False or isinstance(effect, dict)== False or (pos!=1 and pos!= 2):
			return False
		
		range= effect['targetA'].get('range')
		pointer= effect['targetA'].get('pointer')	
		uniqid= effect['object']		
	
		pointer_type= pointer.get('pointerType')
		pointer_value= pointer.get('pointerValue')			

		if pos== 1:
			locaX = RoomModel.getRoomPlayCardsMaxLocaX(room['cardPlay1'])
		else:
			locaX = RoomModel.getRoomPlayCardsMaxLocaX(room['cardPlay2'])		
		
		ids= range.get('cardID')
		if isinstance(ids, list)== False:
			ids= [ids]
			
		if ids== None:
			return False		
		
		if pointer_type== 'randomX':
			count= min(len(ids), pointer_value)
			count= max(1, pointer_value)
			ids= random.sample(ids, count)
			
		x= 0		
		for index, val in enumerate(ids):
			#ids[index]= int(val)
			x= x+1		
			lx= locaX+ x
			data= CardModel.getCardsById(int(val))
			if data== None:
				continue
			data['uniqid']= uniqid= int(time.time()) + data['_id']+ random.randint(100000, 999999)
			data= RoomModel.getRoomCardCustomFormat(data)
				
			if pos== 1:
				room['cardOrigin1'][uniqid]= data
				data['locaX']= lx
				data['locaY']= 0
				room['cardPlay1'].append(data)
				
			else:
				room['cardOrigin2'][uniqid]= data
				data['locaX']= lx
				data['locaY']= 0
				room['cardPlay2'].append(data)				
		
				RoomModel.updatePlayCardsLocX(room, pos, lx, uniqid)
		
		return True
	
	#法力水晶
	@classmethod		
	def doEffectAddCrystal(self, room, pos, effect, uniqids= []):
		if isinstance(room, dict)== False or isinstance(effect, dict)== False or (pos!=1 and pos!= 2):
			return False
		
		range= effect['targetA'].get('range')
		pointer= effect['targetA'].get('pointer')
		
		value= EffectHelperModel.getEffectValue(room, pos, effect)
		if value== None or value< 1:
			value= 1

		if pos== 1:
			room['crystal1']= room['crystal1']+ value
		else:
			room['crystal2']= room['crystal2']+ value
		
		return True
	
	
	
	
	
	
		
		

# -*- coding: utf-8 -*-
import sys
import os
import random
import time
import json
from pprint import pprint
from errors import err
#<class 'model.BaseModel.BaseModel'>
from model.BaseModel import BaseModel
from model.CardModel import CardModel
from pymongo.errors import AutoReconnect
						
class RoomModel(BaseModel): 
	def __init__(self): 
		super(RoomModel, self).__init__()	
		
	@classmethod	
	def getRoom(self, room_id):
		if int(room_id)<= 0:
			return None
		room= self.redis.hgetall('hs:room:info:'+ room_id)	
		#pprint(room)
		for k, v in room.items():
			if(k== 'cardOrigin1' and room['cardOrigin1']!={}):
				room['cardOrigin1']= json.loads(room['cardOrigin1'])			
		
			elif(k== 'cardOrigin2' and room['cardOrigin2']!={}):
				room['cardOrigin2']= json.loads(room['cardOrigin2'])

			elif(k== 'cardAll1' and room['cardAll1']!=[]):	
				room['cardAll1']= json.loads(room['cardAll1'])
			
			elif(k== 'cardAll2' and room['cardAll2']!=[]):	
				room['cardAll2']= json.loads(room['cardAll2'])				
		
			elif(k== 'cardHand1' and room['cardHand1']!=[]):	
				room['cardHand1']= json.loads(room['cardHand1'])
				
			elif(k== 'cardHand2' and room['cardHand2']!=[]):
				room['cardHand2']= json.loads(room['cardHand2'])
				
			elif(k== 'cardPlay1' and room['cardPlay1']!=[]):
				room['cardPlay1']= json.loads(room['cardPlay1'])
				
			elif(k== 'cardPlay2' and room['cardPlay2']!=[]):
				room['cardPlay2']= json.loads(room['cardPlay2'])

			elif(k== 'heros' and room['heros']!=[]):
				room['heros']= json.loads(room['heros'])
			elif(k== 'pos1'):
				pass
			elif(k== 'pos2'):
				pass
			elif room[k]== []:
				pass
			else:
				room[k]= int(v)
			
		return room
	
	@classmethod	
	def setRoom(self, room_id, room):
		if int(room_id)<= 0:
			return False
		#print '###############',len(room['cardAll1']), len(room['cardAll2'])
		if(isinstance(room['cardOrigin1'], dict)== True):
			room['cardOrigin1']= json.dumps(room['cardOrigin1'])
		
		if(isinstance(room['cardOrigin2'], dict)== True):
			room['cardOrigin2']= json.dumps(room['cardOrigin2'])
			
			
		if(isinstance(room['cardAll1'], list)== True):
			room['cardAll1']= json.dumps(room['cardAll1'])

		
		if(isinstance(room['cardAll2'], list)== True):
			room['cardAll2']= json.dumps(room['cardAll2'])

			
		if(isinstance(room['cardHand1'], list)== True):
			room['cardHand1']= json.dumps(room['cardHand1'])

			
		if(isinstance(room['cardHand2'], list)== True):
			room['cardHand2']= json.dumps(room['cardHand2'])

			
		if(isinstance(room['cardPlay1'], list)== True):
			room['cardPlay1']= json.dumps(room['cardPlay1'])

			
		if(isinstance(room['cardPlay2'], list)== True):
			room['cardPlay2']= json.dumps(room['cardPlay2'])

		if(isinstance(room['heros'], list)== True):	
			room['heros']= json.dumps(room['heros'])

		
		self.redis.hmset('hs:room:info:'+ room_id, room)
		if self.redis.ttl('hs:room:info:'+ room_id)== None:
			self.redis.expire('hs:room:info:'+ room_id, 3600)
			
		return True	
	
	@classmethod	
	def getRoomCardPosById(self, cards, id):
		if isinstance(id, int)== False or int(id)<= 0 or isinstance(cards, list)== False:
			return False
		
		for k, c in enumerate(cards):
			if c.get('uniqid')== id:
				return k
		return -1
	
	@classmethod	
	def getRoomCardById(self, cards, id):
		if isinstance(id, int)== False or int(id)<= 0 or isinstance(cards, list)== False:
			return False
		
		for k, c in enumerate(cards):
			if c.get('uniqid')== id:
				return k, c
		return None, None
	
	@classmethod	
	def getRoomHeroAtkByPos(self, room, pos):
		if isinstance(pos, int)== False or int(id)<= 0 or isinstance(room, dict)== False:
			return False
		
		hero= room.get('heros')
		if hero== None:
			return None
		if pos== 1:
			return hero[0]['atk']
		elif pos== 2:
			return hero[1]['atk']
		
	@classmethod		
	def getRoomFirstCards(self, room, pos): 
		if isinstance(pos, int)== False or int(pos)<= 0 or isinstance(room, dict)== False:
			return None
		
		hero= room.get('heros')
		if hero== None:
			return None
		if pos== 1:
			jobCards= hero[0]['jobCards']
		elif pos== 2:
			jobCards= hero[1]['jobCards']
		
		ret= {}	
		for k, v in enumerate(jobCards):
			#jobCards[k]= int(v)
			data= CardModel.getCardsById(int(v))
			if(data!= None):
				data['uniqid']= int(time.time())+ k + data['_id']+ random.randint(100000, 999999)
			#ret.append(data)
			ret[data['uniqid']]= data
		
		#fix bug
		#ret= CardModel.getCardsByIds(jobCards)		

		return ret
	
	@classmethod
	def getRoomRandCards(self, data, num=1): 
		if(isinstance(data, list)== False) or num< 0:
			return None
		
		ret= []
		le= len(data)
		if num> le:
			return None
		for i in xrange(0, num):
			le= len(data)

			rand= random.randint(0, le-1)
			p= data.pop(rand)
			ret.append(p)

		return ret
	
	@classmethod
	def getRoomCardResult(self, data): 	
		if isinstance(data, dict)== True:
			buf= {}
			buf['uniqid']= data.get('uniqid')
			buf['_id']= data.get('_id')
			return buf
		else:
			return {}	
		
	@classmethod
	def getRoomCardsResult(self, data): 	
		if isinstance(data, list)== True:
			for index, val in enumerate(data):
				if isinstance(val, dict)== False:
					continue	
				data[index]= self.getRoomCardResult(val)
			return data	
		else:
			return []	
		
	@classmethod
	def getRoomCardsAll(self, data): 
		ret= []	
		if isinstance(data, dict)== True:
			for id, val in data.items(): 
				if isinstance(val, dict)== False:
					continue
				buf= {}
				buf['uniqid']= val.get('uniqid')
				buf['_id']= val.get('_id')	
				'''
				buf['skillId']= val.get('skillId')
				buf['hp']= val.get('hp')
				buf['atk']= val.get('atk')
				buf['cost']= val.get('cost')
				buf['durability']= val.get('durability')
				''' 
				ret.append(buf)
			return ret	
		else:
			return []

			
		


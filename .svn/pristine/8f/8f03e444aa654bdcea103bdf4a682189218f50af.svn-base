# -*- coding: utf-8 -*-
import sys
import os
import random
import time
import json
from errors import err
#<class 'model.BaseModel.BaseModel'>
from model.BaseModel import BaseModel
from model.RoomModel import RoomModel
from pymongo.errors import AutoReconnect
						
class FightModel(BaseModel): 
	#status
	#冲锋，嘲讽 ，风怒， 圣盾， 潜行stealth，沉默silence，冰冻frozen，变形transformed, 隐秘secret
	STATUS_DEFAULT, STATUS_DASH,  STATUS_TAUNT, STATUS_WINDFURY, STATUS_SHIELD, STATUS_STEALTH, STATUS_SILENCE, STATUS_FROZEN, \
	STATUS_TRANSFORMED, STATUS_SECRET \
	= 0, 1, 2, 4, 8 ,16, 32, 64, 128, 256
	
	
	def __init__(self): 
		super(FightModel, self).__init__()
	

	@classmethod
	def checkGameOver(self, room):
		if isinstance(room, dict)== False:
			return False
		time= room.get('result')
		if time>0:
			return True
		
		return False

	@classmethod
	def checkWeapon(self, room, pos, durability):
		if isinstance(room, dict)== False or (pos!=1 and pos!= 2):
			return False
		#durability= durability- 1
		#durability= max(0, durability)
		if durability== None:
			return False
		if int(durability)== 0:
			if pos== 1:
				room['weapon1']= {}
				room['cardPlay1'][0]['atk']= 0
			else:
				room['weapon2']= {}
				room['cardPlay2'][0]['atk']= 0
		
		return True	
		
	'''
	判断攻击次数
	'''		
	@classmethod
	def checkAttackerAtkTime(self, card):
		if isinstance(card, dict)== False:
			return False
		time= card.get('currentAtkTime')
		if time== None or int(time)< 1:
			return False
		
		return True
		
	
	'''
	判断冲锋状态
	'''
	'''		
	@classmethod
	def checkAttackerStatusDash(self, card):
		if isinstance(room, dict)== False or uniqid== None or (pos!=1 and pos!= 2):
			return False
	'''
		 	
	'''
	判断嘲讽状态
	'''		
	@classmethod
	def checkTargetStatusTaunt(self, room,  pos, target): 	
		if isinstance(room, dict)== False or isinstance(target, int)== False or (pos!=1 and pos!= 2):
			return False
		
		if pos== 1:
			target_pos= 2
			cards= room['cardPlay2']
		elif pos== 2:
			target_pos= 1
			cards= room['cardPlay1']
			
		ret= []	
		for k, c in enumerate(cards):
			if c.get('status')== self.STATUS_TAUNT:
				ret.append(c.get('uniqid'))
				
		if ret.count(target)> 0:
			return True
				
		return False
			
			



